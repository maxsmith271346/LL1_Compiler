Computation[main:()->void]
  DeclarationList
    VariableDeclaration[input:int]
    VariableDeclaration[myvar:int]
  DeclarationList
    FunctionDeclaration[tailSumIter:(int)->int]
      FunctionBody
        DeclarationList
          VariableDeclaration[sum:int]
        StatementSequence
          Assignment
            sum:int
            IntegerLiteral[0]
          RepeatStatement
            StatementSequence
              Assignment
                sum:int
                Addition
                  sum:int
                  n:int
              Assignment
                n:int
                Subtraction
                  n:int
                  IntegerLiteral[1]
            Relation[<=]
              n:int
              IntegerLiteral[0]
          ReturnStatement
            sum:int
    FunctionDeclaration[tailSumRecur:(int, int)->int]
      FunctionBody
        StatementSequence
          IfStatement
            Relation[==]
              n:int
              IntegerLiteral[0]
            StatementSequence
              ReturnStatement
                sum:int
          ReturnStatement
            FunctionCall[tailSumRecur:(int, int)->int]
              ArgumentList
                Subtraction
                  n:int
                  IntegerLiteral[1]
                Addition
                  sum:int
                  n:int
  StatementSequence
    Assignment
      input:int
      FunctionCall[readInt:()->int]
        ArgumentList
    Assignment
      myvar:int
      FunctionCall[tailSumIter:(int)->int]
        ArgumentList
          input:int
    FunctionCall[printInt:(int)->void]
      ArgumentList
        myvar:int
    FunctionCall[println:()->void]
      ArgumentList
    Assignment
      myvar:int
      FunctionCall[tailSumRecur:(int, int)->int]
        ArgumentList
          input:int
          IntegerLiteral[0]
    FunctionCall[printInt:(int)->void]
      ArgumentList
        myvar:int
    FunctionCall[println:()->void]
      ArgumentList

