Computation[main:()->void]
  DeclarationList
    VariableDeclaration[input:int]
    VariableDeclaration[i:int]
    VariableDeclaration[base:int]
    VariableDeclaration[exponent:int]
    VariableDeclaration[power:int]
  DeclarationList
    FunctionDeclaration[power:(int, int)->int]
      FunctionBody
        DeclarationList
          VariableDeclaration[div:int]
          VariableDeclaration[mul:int]
          VariableDeclaration[diff:int]
          VariableDeclaration[ans:int]
          VariableDeclaration[temp:int]
        StatementSequence
          IfStatement
            Relation[==]
              b:int
              IntegerLiteral[0]
            StatementSequence
              ReturnStatement
                IntegerLiteral[1]
          Assignment
            ans:int
            IntegerLiteral[1]
          IfStatement
            Relation[==]
              Modulo
                b:int
                IntegerLiteral[2]
              IntegerLiteral[1]
            StatementSequence
              Assignment
                ans:int
                a:int
          Assignment
            temp:int
            FunctionCall[[power:int, power:(int, int)->int]]
              ArgumentList
                a:int
                Division
                  b:int
                  IntegerLiteral[2]
          Assignment
            temp:int
            Multiplication
              temp:int
              temp:int
          Assignment
            ans:int
            Multiplication
              ans:int
              temp:int
          ReturnStatement
            ans:int
  StatementSequence
    Assignment
      input:int
      FunctionCall[[readInt:()->int]]
        ArgumentList
    RepeatStatement
      StatementSequence
        Assignment
          base:int
          FunctionCall[[readInt:()->int]]
            ArgumentList
        Assignment
          exponent:int
          FunctionCall[[readInt:()->int]]
            ArgumentList
        FunctionCall[[printInt:(int)->void]]
          ArgumentList
            base:int
        FunctionCall[[printInt:(int)->void]]
          ArgumentList
            exponent:int
        FunctionCall[[println:()->void]]
          ArgumentList
        Assignment
          power:int
          FunctionCall[[power:int, power:(int, int)->int]]
            ArgumentList
              base:int
              exponent:int
        FunctionCall[[printInt:(int)->void]]
          ArgumentList
            power:int
        FunctionCall[[printInt:(int)->void]]
          ArgumentList
            Power
              base:int
              exponent:int
        FunctionCall[[println:()->void]]
          ArgumentList
        Assignment
          input:int
          Subtraction
            input:int
            IntegerLiteral[1]
      Relation[<=]
        input:int
        IntegerLiteral[0]
